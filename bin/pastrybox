#!/usr/bin/env node

/**
 * A simple program to read the Pastry Box in the console,
 * print pdfs of the project and clone our archives.
 *
 * MIT License
 *
 * @alexduloz
 */
var prompt = require("prompt");
var request = require("request");
var path = require("path");
var fs = require("fs-extra");
var childProcess = require('child_process');
var phantom = __dirname + "/lib/phantomjs";

var endpoints = {
    "consume": {
        "thoughts": "https://the-pastry-box-project.net/api/v1/consume/thoughts",
        "archives": "https://the-pastry-box-project.net/api/v1/consume/archives",
    }
};

var cwd = process.cwd();

function program() {

    // args
    var today;
    var day;
    var from;
    var to;
    var baker;
    var print;
    var file;
    var qs;

    if (process.argv.length > 2) {

        //
        // Clone
        //
        if (process.argv[2] === "clone") {
            clone();
            return;
        }

        //
        // Read/print
        //
        for (var i = 0; i < process.argv.length; i++) {

            if (process.argv[i] === "today") {
                today = i;
            }

            if (process.argv[i] === "day") {
                day = i;
            }

            if (process.argv[i] === "from") {
                from = i;
            }

            if (process.argv[i] === "to") {
                to = i;
            }

            if (process.argv[i] === "baker") {
                baker = i;
            }

            if (process.argv[i] === "print") {
                print = i;
            }

            if (process.argv[i] === "file") {
                file = i;
            }
        };

        // build qs
        qs = "";

        if (today) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            today = dd + '-' + mm + '-' + yyyy;
            qs += "&day=" + today;
        }

        if (from) {
            qs += "&from=" + process.argv[from + 1];
        }

        if (to) {
            qs += "&to=" + process.argv[to + 1];
        }

        if (day) {
            qs += "&day=" + process.argv[day + 1];
        }

        if (baker) {
            qs += "&baker=" + process.argv[baker + 1];
        }

        if (print) {
            qs += "&format=html";
        } else {
            qs += "&format=markdown";
        }

        if (file) {
            file = process.argv[file + 1];
        }
    }

    qs = (typeof qs !== "undefined") ? "?" + qs.substr(1) : "";

    if (!print) {
        request.get(endpoints.consume.thoughts + qs, function(error, response) {

            if (error) {
                console.log("Connection to the Pastry Box server failed");
                return;
            }

            if (response.statusCode === 500) {
                console.log("The Pastry Box server returned a '500' HTTP code. Sorry about that...");
                return;
            }

            console.log(response.body);

            return;
        });
    }

    if (print) {
        console.log("Creating your document (this may take a while depending on the size of what you're printing)");

        file = (file) ? file : "pastrybox-" + new Date().getTime();

        if (file.slice(-4).toLowerCase() !== ".pdf") {
            file += ".pdf";
        }

        var args = [
            path.join(__dirname + "/lib/", 'print.js'),
            endpoints.consume.thoughts + qs,
            file
        ]

        childProcess.execFile(phantom, args, function(err, stdout, stderr) {
            if (err) {
                console.log("Sorry, an error occured: " + stderr);
                return;
            }
            console.log("Your document is ready");
        });

    }

}

function clone() {
    var clonable = [
        "archives"
    ];

    var toClone = process.argv[3];

    if (clonable.indexOf(toClone) === -1) {
        console.log("Wrong paramater. Try '$ pastrybox clone archives'");
        return;
    }

    console.log("Cloning...");

    var year = process.argv[4];
    var yearOrNot = (typeof year !== "undefined") ? "?year=" + year : "";

    request.get(endpoints.consume.archives + yearOrNot, function(error, response) {

        if (error) {
            console.log("Connection to the Pastry Box server failed");
            return;
        }

        if (response.statusCode === 500) {
            console.log("The Pastry Box server returned a '500' HTTP code. Sorry about that...");
            return;
        }

        if (response.statusCode !== 200) {
            console.log(response.body);
            return;
        }

        try {
            var archives = JSON.parse(response.body);
        } catch (e) {
            console.log("The response is not valid JSON. This is weird... Could you let @alexduloz know?");
            console.log(e);
            return;
        }
        var l = archives.length;
        for (var i = 0; i < l; i++) {
            var dir = archives[i].dir;
            for (var k = 0; k < archives[i].paths.length; k++) {
                for (var ext in archives[i].files) {
                    fs.outputFileSync(cwd + dir + archives[i].paths[k] + ext, archives[i].files[ext]);
                }
            };
        };

        console.log("Done!");

        return;
    });

    function writeChunk() {

    }

}

program();